name: CI Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 7.0.x

      - name: Restore dependencies
        run: dotnet restore
        working-directory: ./src/PipocaAgilPodcast.Presentation

      - name: Build
        run: dotnet build --configuration Release
        working-directory: ./src/PipocaAgilPodcast.Presentation

  test:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 7.0.x

      - name: Restore dependencies
        run: dotnet restore
        working-directory: ./tests

      - name: Test
        run: dotnet test
        working-directory: ./tests

  install-reportgenerator:
    runs-on: windows-latest
    steps:
      - name: Install ReportGenerator
        run: dotnet tool install -g dotnet-reportgenerator-globaltool

  calculate-coverage:
    needs:
      - test
      - install-reportgenerator

    runs-on: windows-latest
    steps:
      - name: Checkout código
        uses: actions/checkout@v2

      - name: Calculate code coverage
        run: |
          if (Test-Path -Path "D:\a\PipocaAgilPodcast-server\PipocaAgilPodcast-server\tests\coverage.opencover.xml") {
            $coverage = [xml](Get-Content "D:\a\PipocaAgilPodcast-server\PipocaAgilPodcast-server\tests\coverage.opencover.xml")
            $lineCoverage = [float]$coverage.CoverageReport.Modules.Module[1].Metrics.Metric | Where-Object { $_.Name -eq 'Line' }
            $branchCoverage = [float]$coverage.CoverageReport.Modules.Module[1].Metrics.Metric | Where-Object { $_.Name -eq 'Branch' }
            $methodCoverage = [float]$coverage.CoverageReport.Modules.Module[1].Metrics.Metric | Where-Object { $_.Name -eq 'Method' }
            echo "::set-output name=lineCoverage::$lineCoverage"
            echo "::set-output name=branchCoverage::$branchCoverage"
            echo "::set-output name=methodCoverage::$methodCoverage"
          }
      
      - name: Analisar Resultados dos Testes e Atualizar README
        run: |
          if (Test-Path -Path "D:\a\PipocaAgilPodcast-server\PipocaAgilPodcast-server/README.md") {
            $readmeContent = Get-Content "D:\a\PipocaAgilPodcast-server\PipocaAgilPodcast-server/README.md"
            $lineCoverage = ${{ steps.calculate-coverage.outputs.lineCoverage }}
            $branchCoverage = ${{ steps.calculate-coverage.outputs.branchCoverage }}
            $methodCoverage = ${{ steps.calculate-coverage.outputs.methodCoverage }}
            $readmeContent = $readmeContent -replace '<td>Testes de Unidade</td>', "<td>Testes de Unidade</td>`n<td><img src=`"https://img.shields.io/badge/tests-$status-brightgreen`"></td>`n<td><img src=`"https://img.shields.io/badge/line-coverage-$lineCoverage%-brightgreen`"></td>`n<td><img src=`"https://img.shields.io/badge/branch-coverage-$branchCoverage%-brightgreen`"></td>`n<td><img src=`"https://img.shields.io/badge/method-coverage-$methodCoverage%-brightgreen`"></td>"
            Set-Content "D:\a\PipocaAgilPodcast-server\PipocaAgilPodcast-server/README.md" $readmeContent
          } else {
            Write-Host "O arquivo README.md não foi encontrado."
          }
        env:
          status: ${{ steps.calculate-coverage.outputs.status }}
