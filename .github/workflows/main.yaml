name: CI Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v2
      - name: Debug Files in Workspace
        run: |
          # List files and directories in the workspace
          ls -la $PWD
          ls -la $GITHUB_WORKSPACE
        shell: bash

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 7.0.x

      - name: Restore dependencies
        run: dotnet restore
        working-directory: ./src/PipocaAgilPodcast.Presentation

      - name: Build
        run: dotnet build --configuration Release
        working-directory: ./src/PipocaAgilPodcast.Presentation

  test:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v2
      - name: Debug Files in Workspace
        run: |
          # List files and directories in the workspace
          ls -la $PWD
          ls -la $GITHUB_WORKSPACE
        shell: bash

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 7.0.x

      - name: Restore dependencies
        run: dotnet restore
        working-directory: ./tests

      - name: Test
        run: dotnet test
        working-directory: ./tests

  install-reportgenerator:
    runs-on: windows-latest
    steps:
      - name: Install ReportGenerator
        run: dotnet tool install -g dotnet-reportgenerator-globaltool

  update-readme:
    needs:
      - test
      - install-reportgenerator

    runs-on: windows-latest
    steps:
      - name: Checkout código
        uses: actions/checkout@v2

      - name: Debug Arquivos no Workspace
        run: |
          # Listar arquivos e diretórios no workspace
          ls -la $GITHUB_WORKSPACE
        shell: bash

      - name: List Workspace Contents
        run: ls -R $GITHUB_WORKSPACE
      
      - name: Calculate code coverage
        run: |
          dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=opencover
        working-directory: ./tests
      
      - name: Analisar Resultados dos Testes e Atualizar README
        run: |
          if (Test-Path -Path "D:\a\PipocaAgilPodcast-server\PipocaAgilPodcast-server\tests\coverage.opencover.xml") {
            # Calcular o status dos testes com base no relatório de cobertura
            $coverageThreshold = 80  # Defina o limite de cobertura desejado aqui
            $coverage = [float]([xml](Get-Content "D:\a\PipocaAgilPodcast-server\PipocaAgilPodcast-server/tests/coverage.opencover.xml")).CoverageReport.Lines.CoveredPercent
            Write-Host "Cobertura de código: $coverage"
        
            if ($coverage -lt $coverageThreshold) {
                Write-Host "A cobertura de teste está abaixo do limite. Os testes falharam."
                echo "::set-output name=unitTestsStatus::failing"
            } else {
                Write-Host "A cobertura de teste atende ao limite. Os testes estão passando."
                echo "::set-output name=unitTestsStatus::passing"
            }
            } else {
                Write-Host "Nenhum relatório de cobertura de código encontrado. Assumindo que os testes estão passando."
                echo "::set-output name=unitTestsStatus::passing"
            }

          # Definir a variável de ambiente 'status'
          echo "status=$env:unitTestsStatus" >> $GITHUB_ENV

          $codeCoverage = 0  # Substitua 85 pela porcentagem real de cobertura de código
          if (Test-Path -Path "D:\a\PipocaAgilPodcast-server\PipocaAgilPodcast-server/README.md") {
              $readmeContent = Get-Content "D:\a\PipocaAgilPodcast-server\PipocaAgilPodcast-server\README.md"
              $readmeContent = $readmeContent -replace '<td>Testes de Unidade</td>', "<td>Testes de Unidade</td>`n<td><img src=`"https://img.shields.io/badge/tests-$status-brightgreen`"></td>`n<td><img src=`"https://img.shields.io/badge/coverage-$codeCoverage%-brightgreen`"></td>"
              Set-Content "D:\a\PipocaAgilPodcast-server\PipocaAgilPodcast-server/README.md" $readmeContent
          } else {
              Write-Host "O arquivo README.md não foi encontrado."
          }

        shell: pwsh

    
      