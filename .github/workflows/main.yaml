name: CI Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 7.0.x

      - name: Restore dependencies
        run: dotnet restore
        working-directory: ./src/PipocaAgilPodcast.Presentation

      - name: Build
        run: dotnet build --configuration Release
        working-directory: ./src/PipocaAgilPodcast.Presentation

  test:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 7.0.x

      - name: Restore dependencies
        run: dotnet restore
        working-directory: ./tests

      - name: Test
        run: dotnet test
        working-directory: ./tests

  install-reportgenerator:
    runs-on: windows-latest
    steps:
      - name: Install ReportGenerator
        run: dotnet tool install -g dotnet-reportgenerator-globaltool
        # You might need to add the tool installation to the PATH
        # run: echo "::add-path::$(dotnet --list-sdks)/$(dotnet --list-runtimes)"

  update-readme:
    needs:
      - test
      - install-reportgenerator # Ensure the tool is installed before running ReportGenerator
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Analyze Test Results and Update README
        run: |
          if [ -f ./tests/coverage.opencover.xml ]; then
            # Calculate test status based on the coverage report
            coverageThreshold=80  # Define your desired coverage threshold here
            coverage=$(bash <(curl -s https://codecov.io/bash) -f ./tests/coverage.opencover.xml)
            echo "Code coverage: $coverage%"

            if (( $(echo "$coverage < $coverageThreshold" | bc -l) )); then
              echo "Test coverage is below the threshold. Tests are failing."
              echo "::set-output name=unitTestsStatus::failing"
            else
              echo "Test coverage meets the threshold. Tests are passing."
              echo "::set-output name=unitTestsStatus::passing"
            fi
          else
            echo "No code coverage report found. Assuming tests are passing."
            echo "::set-output name=unitTestsStatus::passing"
          fi

          # Update the README with the status
          status=$(/bin/bash -c "echo \${unitTestsStatus}")
          sed -i "s/<td>Testes de Unidade<\/td>/<td>Testes de Unidade<\/td>\n<td><img src=\"https://img.shields.io/badge/tests-$status-brightgreen\"></td>/" README.md
        working-directory: ${{ github.workspace }}