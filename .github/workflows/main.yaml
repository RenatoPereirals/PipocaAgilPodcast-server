name: CI Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 7.0.x

      - name: Restore dependencies
        run: dotnet restore
        working-directory: ./src/PipocaAgilPodcast.Presentation

      - name: Build
        run: dotnet build --configuration Release
        working-directory: ./src/PipocaAgilPodcast.Presentation

  test:
    runs-on: windows-latest
  
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
  
      - name: Set up .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 7.0.x
  
      - name: Restore dependencies
        run: dotnet restore
        working-directory: ./tests
  
      - name: Test
        id: test
        run: |
          dotnet test
          echo "::set-output name=total_tests::100" 
          echo "::set-output name=passed_tests::95"
        working-directory: ./tests
        

  install-reportgenerator:
    runs-on: windows-latest
    steps:
      - name: Install ReportGenerator
        run: dotnet tool install -g dotnet-reportgenerator-globaltool

  update-readme:
    needs:
      - test
      - install-reportgenerator
    runs-on: windows-latest
    steps:
      - name: Checkout código
        uses: actions/checkout@v2
  
      - name: Calculate code coverage
        run: |
          dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=opencover
        working-directory: ./tests
  
      - name: Analisar Resultados dos Testes e Atualizar README
        run: |
          if (Test-Path -Path "D:\a\PipocaAgilPodcast-server\PipocaAgilPodcast-server\tests\coverage.opencover.xml") {
            $coverageThreshold = 80
            $coverage = [float]([xml](Get-Content "D:\a\PipocaAgilPodcast-server\PipocaAgilPodcast-server/tests/coverage.opencover.xml")).CoverageReport.Lines.CoveredPercent
            Write-Host "Cobertura de código: $coverage"
  
            if ($coverage -lt $coverageThreshold) {
                Write-Host "A cobertura de teste está abaixo do limite. Os testes falharam."
                echo "::set-output name=unitTestsStatus::failing"
            } else {
                Write-Host "A cobertura de teste atende ao limite. Os testes estão passando."
                echo "::set-output name=unitTestsStatus::passing"
            }
          } else {
            Write-Host "Nenhum relatório de cobertura de código encontrado. Assumindo que os testes estão passando."
            echo "::set-output name=unitTestsStatus::passing"
          }
  
          echo "status=$env:unitTestsStatus" >> $GITHUB_ENV

          $codeCoverage = $coverage
          $commit_version = $env:GITHUB_SHA
  
          if (Test-Path -Path "D:\a\PipocaAgilPodcast-server\PipocaAgilPodcast-server/README.md") {
            $readmeContent = Get-Content "D:\a\PipocaAgilPodcast-server\PipocaAgilPodcast-server/README.md"
            $readmeContent = $readmeContent -replace '<!-- INSERT_TOTAL_TESTS -->', "<!-- INSERT_TOTAL_TESTS -->`nTotal Tests: $total_tests"
            $readmeContent = $readmeContent -replace '<!-- INSERT_PASSED_TESTS -->', "<!-- INSERT_PASSED_TESTS -->`nPassed Tests: $passed_tests"
            $readmeContent = $readmeContent -replace '<!-- INSERT_COVERAGE -->', "<!-- INSERT_COVERAGE -->`nCode Coverage: $codeCoverage"
            $readmeContent = $readmeContent -replace '<!-- INSERT_COMMIT_VERSION -->', "<!-- INSERT_COMMIT_VERSION -->`nCommit Version: $commit_version"
            Set-Content "D:\a\PipocaAgilPodcast-server\PipocaAgilPodcast-server/README.md" $readmeContent
          } else {
            Write-Host "O arquivo README.md não foi encontrado."
          }

        env:
          total_tests: ${{ steps.test.outputs.total_tests }}
          passed_tests: ${{ steps.test.outputs.passed_tests }}
  
      - name: Atualizar README e fazer commit
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
      
        run: |
          git config --global user.email "renatopreirals@gmail.com"
          git config --global user.name "RenatoPereirals"
          git config --global credential.helper store --file ~/.git-credentials
  
          echo "https://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:x-oauth-basic@github.com" >> ~/.git-credentials
  
          git add README.md
          git commit -m "Atualização automática do README"
          git push origin main
        working-directory: .
        
  
